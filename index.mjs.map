{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar copy = require( '@stdlib/utils-copy' );\nvar isInteger = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants-float64-max' );\nvar runif = require( '@stdlib/random-base-discrete-uniform' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2, 6 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( a, b, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isInteger( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', a ) );\n\t}\n\tif ( !isInteger( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', b ) );\n\t}\n\tif ( a > b ) {\n\t\tthrow new RangeError( format( 'invalid argument. Minimum support `a` must be less than or equal to maximum support `b`. Value: `[%d,%d]`.', a, b ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options, 1 );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = runif( a, b, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = runif( a, b );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( a, b, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @module @stdlib/random-iter-discrete-uniform\n*\n* @example\n* var iterator = require( '@stdlib/random-iter-discrete-uniform' );\n*\n* var iter = iterator( -1, 2 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n"],"names":["setReadOnly","require$$0","setReadOnlyAccessor","require$$1","setReadWriteAccessor","require$$2","constantFunction","require$$3","noop","require$$4","copy","require$$5","isInteger","require$$6","isPrimitive","isObject","require$$7","isNonNegativeInteger","require$$8","hasOwnProp","require$$9","MAX_VALUE","require$$10","runif","require$$11","factory","iteratorSymbol","require$$12","format","require$$13","main","iterator","a","b","options","opts","iter","rand","FLG","i","TypeError","RangeError","arguments","length","prng","state","next","end","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","done","value","seed","seedLength","stateLength","byteLength","s","lib"],"mappings":";;kxCAsBA,IAAIA,EAAcC,EACdC,EAAsBC,EACtBC,EAAuBC,EACvBC,EAAmBC,EACnBC,EAAOC,EACPC,EAAOC,EACPC,EAAYC,EAAsCC,YAClDC,EAAWC,EACXC,EAAuBC,EAAmDJ,YAC1EK,EAAaC,EACbC,EAAYC,EACZC,EAAQC,EAAkDC,QAC1DC,EAAiBC,EACjBC,EAASC,EA0Nb,IAAAC,EApLA,SAASC,EAAUC,EAAGC,EAAGC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAM3B,EAAWoB,GAChB,MAAM,IAAIQ,UAAWZ,EAAQ,oEAAqEI,IAEnG,IAAMpB,EAAWqB,GAChB,MAAM,IAAIO,UAAWZ,EAAQ,qEAAsEK,IAEpG,GAAKD,EAAIC,EACR,MAAM,IAAIQ,WAAYb,EAAQ,6GAA8GI,EAAGC,IAEhJ,GAAKS,UAAUC,OAAS,EAAI,CAC3B,IAAM5B,EAAUmB,GACf,MAAM,IAAIM,UAAWZ,EAAQ,qEAAsEM,IAGpG,GADAC,EAAOzB,EAAMwB,EAAS,GACjBf,EAAYgB,EAAM,SACtB,IAAMlB,EAAsBkB,EAAKC,MAChC,MAAM,IAAII,UAAWZ,EAAQ,2EAA4E,OAAQO,EAAKC,YAGvHD,EAAKC,KAAOf,EAEbgB,EAAOd,EAAOS,EAAGC,EAAGE,QACD,IAAdA,EAAKS,OAAiC,IAAdT,EAAKzB,OACjCyB,EAAKU,MAAQR,EAAKQ,YAGnBR,EAAOd,EAAOS,EAAGC,GACjBE,EAAO,CACNC,KAAQf,EACRwB,MAASR,EAAKQ,OA6BhB,OA1BAN,EAAI,EAIJvC,EADAoC,EAAO,GACY,OAAQU,GAC3B9C,EAAaoC,EAAM,SAAUW,GAExBZ,GAAQA,EAAKS,MACjB5C,EAAaoC,EAAM,OAAQ,MAC3BpC,EAAaoC,EAAM,aAAc,MACjChC,EAAsBgC,EAAM,QAAS9B,EAAkB,MAAQE,GAC/DR,EAAaoC,EAAM,cAAe,MAClCpC,EAAaoC,EAAM,aAAc,QAEjClC,EAAqBkC,EAAM,OAAQY,GACnC9C,EAAqBkC,EAAM,aAAca,GACzC7C,EAAsBgC,EAAM,QAASc,EAAUC,GAC/CjD,EAAqBkC,EAAM,cAAegB,GAC1ClD,EAAqBkC,EAAM,aAAciB,IAE1CrD,EAAaoC,EAAM,OAAQC,EAAKiB,MAG3B5B,GACJ1B,EAAaoC,EAAMV,EAAgBD,GAE7BW,EAQP,SAASU,IAER,OADAP,GAAK,EACAD,GAAOC,EAAIJ,EAAKC,KACb,CACNmB,MAAQ,GAGH,CACNC,MAASnB,IACTkB,MAAQ,GAWV,SAASR,EAAKS,GAEb,OADAlB,GAAM,EACDI,UAAUC,OACP,CACNa,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAAS9B,IACR,OAAOM,EAAUC,EAAGC,EAAGE,GASxB,SAASa,IACR,OAAOX,EAAKiB,KAAKG,KASlB,SAASR,IACR,OAAOZ,EAAKiB,KAAKI,WASlB,SAASN,IACR,OAAOf,EAAKiB,KAAKK,YASlB,SAASN,IACR,OAAOhB,EAAKiB,KAAKM,WASlB,SAASV,IACR,OAAOb,EAAKiB,KAAKT,MAUlB,SAASM,EAAUU,GAClBxB,EAAKiB,KAAKT,MAAQgB,ICrMpBC,EALe7D"}